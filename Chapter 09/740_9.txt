# Temperature
# Import the Sense HAT class library
from sense_hat import SenseHat
# Define an object for Sense HAT class library 
# (in this case we name it sense)
sense = SenseHat()
sense.clear()

# Get the reading temperature and assign it to a variable named temp and print the value of it
temp = sense.get_temperature()
print(temp)

#Humidity
# Import the Sense HAT class library
from sense_hat import SenseHat
# Define an object for Sense HAT class library 
# (in this case we name it sense)
sense = SenseHat()
sense.clear()

# Get the humidity reading and assign it to a variable named humidity and print the value of it
humidity = sense.get_humidity()
print(humidity)


# Barometric pressure
# Import the Sense HAT class library
from sense_hat import SenseHat
# Define an object for Sense HAT class library 
# (in this case we name it sense)
sense = SenseHat()
sense.clear()

# Get the pressure reading and assign it to a variable named pressure and print the value of it
pressure = sense.get_pressure()
print(pressure)



# Reading the three values
# Import the Sense HAT class library
from sense_hat import SenseHat
# Define an object for Sense HAT class library 
# (in this case we name it sense)
sense = SenseHat()
sense.clear()

# Get the reading temperature and assign it to a variable named temp
temp = sense.get_temperature()

# Get the humidity reading and assign it to a variable named humidity
humidity = sense.get_humidity()

# Get the pressure reading and assign it to a variable named pressure
pressure = sense.get_pressure()

# Print the values together
# Create the message
# str() converts the value of a variable to a string so it can be concatenated
message = "Temperature: " + str(temp) + "ºC, Pressure: " + str(pressure) + " milibars, Hum: " + str(humidity) + “%”
print(message)


#Accelerometer and Gyroscope
#Inclination and acceleration
# get the reference point and assign it to the orientation variable

orientation = sense.get_orientation()

#assign the corresponding orientation values to the variables

pitch = orientation["pitch"]
roll = orientation["roll"]
yaw = orientation["yaw"]

# Print the values
print("pitch {0} roll {1} yaw {2}".format(pitch, roll, yaw))


#Inclination and acceleration
# get the reference point and assign it to the orientation variable

orientation = sense.get_orientation()

#assign the corresponding orientation values to the variables

pitch = orientation["pitch"]
roll = orientation["roll"]
yaw = orientation["yaw"]

# Print the values
print("pitch {0} roll {1} yaw {2}".format(pitch, roll, yaw))

# get the initial acceleration values to be compared for the deltas

acceleration = sense.get_accelerometer_raw()
x = acceleration['x']
y = acceleration['y']
z = acceleration['z']

# make each of the values a single decimal digit
x=round(x, 1)
y=round(y, 1)
z=round(z, 1)

# Enter a loop to measure the values as you move your Raspberry
while True:
    sleep(0.1)
    xa=x
    ya=y
    za=z
    acceleration = sense.get_accelerometer_raw()
    x = acceleration['x']
    y = acceleration['y']
    z = acceleration['z']

    
    x=round(x, 1)
    y=round(y, 1)
    z=round(z, 1)

# compare the values of acceleration in each of the axis to report the delta change 
    if x != xa:
        print ("x={0}".format(x))
        
    if y != ya:
        print ("y={0}".format(y))

    if z != za:
        print ("z={0}".format(z))

# if we detect the x or y axis change is negative it means that the movement on that axis was radical and we chage the display position by rotating it accordingly
    if x  == -1:
        sense.set_rotation(180)
    elif y == 1:
        sense.set_rotation(90)
    elif y == -1:
        sense.set_rotation(270)
    else:
        sense.set_rotation(0)

# Print the values so you can compare the delta’s
    print("x={0}, y={1}, z={2}".format(x, y, z))


#Clean the Led Matrix Display
sense.clear()

#or

#Clean the Led Matrix Display
sense.clear((0,0,0))


#Clean the Led Matrix Display
sense.clear((255,255,255))

#Clean the Led Matrix Display
sense.clear((0,0,255))

# Defining variables for the three colours of the Led, setting the three of them to its maximum brightness, displays a bright white led

# for the Red light of the Led we use r
r = 255
# for the Green light of the Led we use g
g = 255
# for the Blue light of the Led we use b
b = 255

# Defining array variables for the some colours

# red is lighting the R light only
red = (255,0,0)

# green is lighting the G light only
green =  (0,255,0)

# blue is lighting the B light only
blue = (0,0,255)

# yellow is lighting the R and G lights this way
yellow = (255,255,0)

# pink is lighting the R and B lights this way
pink = (255,0,255)

# and you already know these ones
white = (255,255,255)
black = (0,0,0)

#Clean the Led Matrix Display
sense.clear((0,0,255))

#Clean the Led Matrix Display
sense.clear(blue)

#Message
sense.show_message("Hi!")

#Message with colour and scrolling speed parameters
sense.show_message("Message in yellow over blue at 0.025!", text_colour=yellow, back_colour=blue, scroll_speed=0.025)

# One letter
sense.show_letter("A")

# One letter or symbol
sense.show_letter("@")

# Letters
sense.show_letter("@")
sleep (1)
sense.show_letter("J",text_colour=blue, back_colour=yellow)
sleep (1)
sense.show_letter("S", blue, pink)
sleep (1)
sense.show_letter("2", black, white)
sleep (1)
sense.show_letter("f", white, red)
sleep (1)
sense.show_letter("i", pink, white)
sleep (1)

# Painting pixels
sense.set_pixel(0, 2, blue)
sense.set_pixel(7, 4, red)
sleep (1)

# Painting pixels: a surprise!!
sense.clear ()

sense.set_pixel(2, 2, (0, 0, 255))
sense.set_pixel(4, 2, (0, 0, 255))
sense.set_pixel(3, 4, (100, 0, 0))
sense.set_pixel(1, 5, (255, 0, 0))
sense.set_pixel(2, 6, (255, 0, 0))
sense.set_pixel(3, 6, (255, 0, 0))
sense.set_pixel(4, 6, (255, 0, 0))
sense.set_pixel(5, 5, (255, 0, 0))
sleep (1)

# Painting pixels using two dimensional array to match columns and rows
#sense.clear ()

# Set up where each colour will display
# Define some colours
g = (0, 255, 0) # Green
b = (0, 0, 0) # Black
matrix_of_pixels = [
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
    g, b, b, g, g, b, b, g,
    g, b, b, g, g, b, b, g,
    g, g, g, b, b, g, g, g,
    g, g, b, b, b, b, g, g,
    g, g, b, b, b, b, g, g,
    g, g, b, g, g, b, g, g
    ]

# Display these colours on the LED matrix
sense.set_pixels(matrix_of_pixels)
sleep (1)

# Painting pixels using two dimensional array to match columns and rows
#sense.clear ()
# Define some colours
B = (102, 51, 0)
b = (0, 0, 255)
S = (205,133,63)
W = (255, 255, 255)

# Set up where each colour will display
other_pixels = [
    B, B, B, B, B, B, B, B,
    B, B, B, B, B, B, B, B,
    B, S, S, S, S, S, S, B,
    S, S, S, S, S, S, S, S,
    S, W, b, S, S, b, W, S,
    S, S, S, B, B, S, S, S,
    S, S, B, S, S, B, S, S,
    S, S, B, B, B, B, S, S
    ]

# Display these colours on the LED matrix
sense.set_pixels(other_pixels)
sleep (1)

#Rotation

sense.set_rotation(90)

# Display these colours on the LED matrix
sense.set_pixels(other_pixels)
sleep(2)

sense.set_rotation(270)
# Display these colours on the LED matrix
sense.set_pixels(other_pixels)
sleep(2)

#rotation

sense.set_pixels(other_pixels)
sleep (1)
sense.flip_h()
sleep(1)

sense.set_pixels(other_pixels)
sleep (1)
sense.flip_v()
sleep(1)

sense.clear ()

