# Chapter 14-02: Making a basic robot controlling the arm to the left and to the right with arrow keys
# Moving our robot arm, setting a specific angle between 0º and 180º

# Import the GPIO library and the time library
import RPi.GPIO as GPIO
import time

# Import pygame Library
import pygame

# Call the pygame library and create a basic GUI to start reading keyboard and mouse inputs
pygame.init()
window = pygame.display.set_mode((200, 200))
pygame.display.set_caption("Pygame GUI Screen")

# Define our GPIO18 as our PWM Control Pin
PWMPIN = 18

# Define the naming of our GPIO as the BCM nomenclature (where pin number 12 is GPIO18)
GPIO.setmode(GPIO.BCM)

# Here we assign GPIO18 as output PIN so we can send PWM values to GPIO18
GPIO.setup(PWMPIN, GPIO.OUT)

# Define our servocontrol object as a PWM signal management at 50Hz
servocontrol = GPIO.PWM(PWMPIN, 50) # GPIO 18 for PWM with 50Hz

# Let’s start with the lever position at 0º so we define the angle to 0 and dutycycle to 0
dutycycle=0
angle=0

# With dutycycle set to 0, we initialize our servo position, that as a off pulse or 0
servocontrol.start(dutycycle) 

# Start a loop to keep reading keyboard inputs until QUIT key is pressed
loopflag=True
print ("Press any direction key (arrows) or ESC to quit")

while loopflag:
    for keypressed in pygame.event.get():
        if keypressed.type == pygame.QUIT:
            loopflag = False
        
        if keypressed.type == pygame.KEYDOWN:
            ourkey = pygame.key.name(keypressed.key)
            if ourkey == "escape":
                loopflag = False
             if ourkey == "left":
                # decrease angle
                if angle > 0:
                    angle = angle – 1
             if ourkey == "right":
                # Increasy angle
                if angle < 180:
                    angle = angle + 1
                print ("Angle = ",angle)
                
        # The next formula calculates the proportional PWM value (dutycycle) accordingly to the 2% and 12% limit values for our SG90 depending on the angle value
        dutycycle=angle/180*10+2
        # this PWM value for dutycycle has to be an integer
        dutycycle=int(dutycycle)
        # and with that value we send the PWM pulse to the GPIO defined as servocontrol object to be received by our SG90 and thus move the arm and stop for a moment
        servocontrol.ChangeDutyCycle(dutycycle)
        time.sleep(0.5)
else:
     print ("Wrong key")

# whenever <ESCAPE> is pressed, it finishes our keyboard loop and we proceed to close the pygame interface and stop our SG90 and cleanup the pieces we used in our program
pygame.quit()
servocontrol.stop()
GPIO.cleanup()
